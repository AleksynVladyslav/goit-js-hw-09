{"mappings":"C,A,WCAA,IAAM,EAAU,SAAS,cAAc,SAEvC,EAAQ,iBAAiB,SAEzB,SAAsB,CAAK,EACzB,EAAM,iBAEN,IAAM,EAAM,OAAO,EAAM,cAAc,QAAQ,CAAC,EAAE,CAAC,OAC7C,EAAO,OAAO,EAAM,cAAc,QAAQ,CAAC,EAAE,CAAC,OAC9C,EAAS,OAAO,EAAM,cAAc,QAAQ,CAAC,EAAE,CAAC,OAEtD,AA+BF,CAAA,SAAwB,CAAI,CAAE,CAAK,CAAE,CAAM,EACzC,IAAM,EAAW,EAAE,CAEnB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAAK,CAC/B,IAAM,EAAU,AAlBpB,SAAuB,CAAI,CAAE,CAAK,EAChC,OAAO,IAAI,QAAQ,CAAC,EAAS,KAC3B,IAAM,EAAgB,KAAK,SAAW,GAEtC,WAAW,KACL,EACF,EAAQ,CAAE,KAAA,EAAM,MAAA,CAAM,GAEtB,EAAO,CAAE,KAAA,EAAM,MAAA,CAAM,EAEzB,EAAG,EACL,EACF,EAMkC,EAAI,EAAG,EAAQ,EAAI,GACjD,EAAS,KAAK,EAChB,CAEA,OAAO,QAAQ,WAAW,EAC5B,CAAA,EAxCiB,EAAM,EAAK,GACvB,KAAK,AAAA,IACJ,EAAQ,QAAQ,AAAA,IACd,GAAI,AAAkB,cAAlB,EAAO,OAAwB,CACjC,GAAM,CAAA,KAAE,CAAA,CAAI,MAAE,CAAA,CAAO,CAAG,EAAO,MAC/B,QAAQ,IAAI,CAAC,oBAAoB,EAAE,EAAK,IAAI,EAAE,EAAM,EAAE,CAAC,CACzD,MAAO,GAAI,AAAkB,aAAlB,EAAO,OAAuB,CACvC,GAAM,CAAA,KAAE,CAAA,CAAI,MAAE,CAAA,CAAO,CAAG,EAAO,OAC/B,QAAQ,IAAI,CAAC,mBAAmB,EAAE,EAAK,IAAI,EAAE,EAAM,EAAE,CAAC,CACxD,CACF,EACF,GACC,MAAM,AAAA,IACL,QAAQ,IAAI,SAAU,EACxB,EACJ,E","sources":["<anon>","src/js/03-promises.js"],"sourcesContent":["(function () {\nvar $ce04d3a99e08e73b$exports = {};\nconst $ce04d3a99e08e73b$var$formRef = document.querySelector(\".form\");\n$ce04d3a99e08e73b$var$formRef.addEventListener(\"submit\", $ce04d3a99e08e73b$var$onSubmitForm);\nfunction $ce04d3a99e08e73b$var$onSubmitForm(event) {\n    event.preventDefault();\n    const del = Number(event.currentTarget.elements[0].value);\n    const step = Number(event.currentTarget.elements[1].value);\n    const amount = Number(event.currentTarget.elements[2].value);\n    $ce04d3a99e08e73b$var$createPromises(step, del, amount).then((results)=>{\n        results.forEach((result)=>{\n            if (result.status === \"fulfilled\") {\n                const { step: step , delay: delay  } = result.value;\n                console.log(`✅ Fulfilled promise ${step} in ${delay}ms`);\n            } else if (result.status === \"rejected\") {\n                const { step: step , delay: delay  } = result.reason;\n                console.log(`❌ Rejected promise ${step} in ${delay}ms`);\n            }\n        });\n    }).catch((error)=>{\n        console.log(\"Error:\", error);\n    });\n}\nfunction $ce04d3a99e08e73b$var$createPromise(step, delay) {\n    return new Promise((resolve, reject)=>{\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(()=>{\n            if (shouldResolve) resolve({\n                step: step,\n                delay: delay\n            });\n            else reject({\n                step: step,\n                delay: delay\n            });\n        }, delay);\n    });\n}\nfunction $ce04d3a99e08e73b$var$createPromises(step, delay, amount) {\n    const promises = [];\n    for(let i = 0; i < amount; i++){\n        const promise = $ce04d3a99e08e73b$var$createPromise(1 + i, delay + i * step);\n        promises.push(promise);\n    }\n    return Promise.allSettled(promises);\n}\n\n})();\n//# sourceMappingURL=03-promises.cb35869e.js.map\n","const formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n\n  const del = Number(event.currentTarget.elements[0].value);\n  const step = Number(event.currentTarget.elements[1].value);\n  const amount = Number(event.currentTarget.elements[2].value);\n\n  createPromises(step, del, amount)\n    .then(results => {\n      results.forEach(result => {\n        if (result.status === 'fulfilled') {\n          const { step, delay } = result.value;\n          console.log(`✅ Fulfilled promise ${step} in ${delay}ms`);\n        } else if (result.status === 'rejected') {\n          const { step, delay } = result.reason;\n          console.log(`❌ Rejected promise ${step} in ${delay}ms`);\n        }\n      });\n    })\n    .catch(error => {\n      console.log('Error:', error);\n    });\n}\n\nfunction createPromise(step, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ step, delay });\n      } else {\n        reject({ step, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction createPromises(step, delay, amount) {\n  const promises = [];\n\n  for (let i = 0; i < amount; i++) {\n    const promise = createPromise(1 + i, delay + i * step);\n    promises.push(promise);\n  }\n\n  return Promise.allSettled(promises);\n}\n"],"names":["$ce04d3a99e08e73b$var$formRef","document","querySelector","addEventListener","event","preventDefault","del","Number","currentTarget","elements","value","step","amount","$ce04d3a99e08e73b$var$createPromises","delay","promises","i","promise","$ce04d3a99e08e73b$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","push","allSettled","then","results","forEach","result","status","console","log","reason","catch","error"],"version":3,"file":"03-promises.cb35869e.js.map"}